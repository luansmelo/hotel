generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  role         Role     @default(USER)
  isAuthorized Boolean  @default(false)
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  @@index([email])
  @@map("user")
}

model Product {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  description             String                    @db.VarChar(1000)
  preparationTime         String
  resource                String                    @db.VarChar(400)
  accession               Int?
  inputs                  InputsOnProducts[]
  productMedia            ProductMedia?
  categoryProductSchedule CategoryProductSchedule[]
  photo_url               String?
  createdAt               DateTime                  @default(now()) @map(name: "created_at")
  updatedAt               DateTime                  @updatedAt @map(name: "updated_at")

  @@index([name])
  @@map("product")
}

model ProductMedia {
  id           String   @id @default(uuid())
  location     String
  originalName String
  mimeType     String
  productId    String   @unique
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  @@map("product_media")
}

model InputsOnProducts {
  id              String   @id @default(uuid())
  productId       String
  inputId         String
  measurementUnit String
  grammage        Float
  input           Input    @relation(fields: [inputId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @updatedAt @map(name: "updated_at")

  @@map("inputsOnProducts")
}

model Input {
  id                String             @id @default(uuid())
  name              String             @unique
  code              String             @unique
  unitPrice         Float
  measurementUnit   MeasurementUnit    @relation(fields: [measurementUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groups            GroupsOnInputs[]
  products          InputsOnProducts[]
  createdAt         DateTime           @default(now()) @map(name: "created_at")
  updatedAt         DateTime           @updatedAt @map(name: "updated_at")
  measurementUnitId String

  @@index([code, name, unitPrice])
  @@map("input")
}

model GroupsOnInputs {
  id        String   @id @default(uuid())
  input     Input    @relation(fields: [inputId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inputId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([inputId, groupId])
  @@map("groupsOnInputs")
}

model Group {
  id        String           @id @default(uuid())
  name      String           @unique
  input     GroupsOnInputs[]
  createdAt DateTime         @default(now()) @map(name: "created_at")
  updatedAt DateTime         @updatedAt @map(name: "updated_at")

  @@index([name])
  @@map("group")
}

model Menu {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  createdAt               DateTime                  @default(now()) @map(name: "created_at")
  updatedAt               DateTime                  @updatedAt @map(name: "updated_at")
  categoryProductSchedule CategoryProductSchedule[]

  @@index([name])
  @@map("menu")
}

model CategoryProductSchedule {
  id         String   @id @default(uuid())
  menuId     String
  categoryId String
  productId  String
  weekDay    String
  menu       Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@index([menuId, categoryId, productId, weekDay])
  @@map("categoryProductSchedule")
}

model Category {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  categoryProductSchedule CategoryProductSchedule[]

  @@index([name])
  @@map("category")
}

model MeasurementUnit {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  input     Input[]

  @@index([name])
  @@map("measurementUnit")
}

enum Role {
  USER
  LEADER
  ADMIN
}
