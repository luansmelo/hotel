generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  role         Role     @default(USER)
  isAuthorized Boolean  @default(false)
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")

  @@index([email])
  @@map("user")
}

model Product {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  description             String                    @db.VarChar(1000)
  preparationTime         String
  resource                String                    @db.VarChar(400)
  accession               Int?
  status                  Status?                   @default(INCOMPLETE)
  ingredients             IngredientsOnProducts[]
  productMedia            ProductMedia?
  categoryProductSchedule CategoryProductSchedule[]
  photo_url               String?
  createdAt               DateTime                  @default(now()) @map(name: "created_at")
  updatedAt               DateTime                  @updatedAt @map(name: "updated_at")

  @@index([name])
  @@map("product")
}

model ProductMedia {
  id        String   @id @default(uuid())
  filename  String
  metadata  String
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map("product_media")
}

model IngredientsOnProducts {
  id           String     @id @default(uuid())
  productId    String
  ingredientId String
  measurement  String
  grammage     Float
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")

  @@map("inputsOnProducts")
}

model Ingredient {
  id            String                  @id @default(uuid())
  name          String                  @unique
  code          String                  @unique
  unitPrice     Float
  status        Status?                 @default(INCOMPLETE)
  measurement   Measurement             @relation(fields: [measurementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groups        GroupsOnIngredients[]
  products      IngredientsOnProducts[]
  createdAt     DateTime                @default(now()) @map(name: "created_at")
  updatedAt     DateTime                @updatedAt @map(name: "updated_at")
  measurementId String

  @@index([code, name, unitPrice])
  @@map("ingredient")
}

model GroupsOnIngredients {
  id           String     @id @default(uuid())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ingredientId String
  group        Group      @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId      String
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")

  @@index([ingredientId, groupId])
  @@map("groupsOnInputs")
}

model Group {
  id        String                @id @default(uuid())
  name      String                @unique
  input     GroupsOnIngredients[]
  createdAt DateTime              @default(now()) @map(name: "created_at")
  updatedAt DateTime              @updatedAt @map(name: "updated_at")

  @@index([name])
  @@map("group")
}

model Menu {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  createdAt               DateTime                  @default(now()) @map(name: "created_at")
  updatedAt               DateTime                  @updatedAt @map(name: "updated_at")
  categoryProductSchedule CategoryProductSchedule[]

  @@index([name])
  @@map("menu")
}

model CategoryProductSchedule {
  id         String   @id @default(uuid())
  menuId     String
  categoryId String
  productId  String
  weekDay    String
  menu       Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@index([menuId, categoryId, productId, weekDay])
  @@map("categoryProductSchedule")
}

model Category {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  categoryProductSchedule CategoryProductSchedule[]

  @@index([name])
  @@map("category")
}

model Measurement {
  id         String       @id @default(uuid())
  name       String       @unique
  createdAt  DateTime     @default(now()) @map(name: "created_at")
  updatedAt  DateTime     @updatedAt @map(name: "updated_at")
  ingredient Ingredient[]

  @@index([name])
  @@map("measurement")
}

enum Status {
  COMPLETE
  INCOMPLETE
}

enum Role {
  USER
  LEADER
  ADMIN
}
