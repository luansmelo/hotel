generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  name         String
  email        String  @unique
  password     String
  role         Role    @default(USER)
  isAuthorized Boolean @default(false)
  created_at   String
  updated_at   String

  @@map("user")
}

model Product {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  description             String                    @db.VarChar(1000)
  inputs                  InputsOnProducts[]
  productMedia            ProductMedia?
  created_at              String
  updated_at              String
  categoryProductSchedule CategoryProductSchedule[]

  @@map("product")
}

model ProductMedia {
  id           String  @id @default(uuid())
  location     String
  originalName String
  mimeType     String
  productId    String  @unique
  product      Product @relation(fields: [productId], references: [id])
  created_at   String
  updated_at   String

  @@map("product_media")
}

model InputsOnProducts {
  id              String  @id @default(uuid())
  productId       String
  inputId         String
  measurementUnit String
  grammage        Float
  input           Input   @relation(fields: [inputId], references: [id])
  product         Product @relation(fields: [productId], references: [id])
  created_at      String
  updated_at      String

  @@map("inputsOnProducts")
}

model Input {
  id                String             @id @default(uuid())
  name              String
  code              String             @unique
  unitPrice         Float
  measurementUnit   MeasurementUnit    @relation(fields: [measurementUnitId], references: [id])
  groups            GroupsOnInputs[]
  products          InputsOnProducts[]
  created_at        String
  updated_at        String
  measurementUnitId String

  @@map("input")
}

model GroupsOnInputs {
  id      String @id @default(uuid())
  input   Input  @relation(fields: [inputId], references: [id], onDelete: Cascade)
  inputId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  @@map("groupsOnInputs")
}

model Group {
  id         String           @id @default(uuid())
  name       String           @unique
  input      GroupsOnInputs[]
  created_at String
  updated_at String

  @@map("group")
}

model Menu {
  id                      String                    @id @default(uuid())
  name                    String
  created_at              String
  updated_at              String
  categoryProductSchedule CategoryProductSchedule[]

  @@map("menu")
}

model CategoryProductSchedule {
  id         String   @id @default(uuid())
  menuId     String
  categoryId String
  productId  String
  weekDay    String
  menu       Menu     @relation(fields: [menuId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  created_at String
  updated_at String

  @@map("categoryProductSchedule")
}

model Category {
  id                      String                    @id @default(uuid())
  name                    String
  created_at              String
  updated_at              String
  categoryProductSchedule CategoryProductSchedule[]

  @@map("category")
}

model MeasurementUnit {
  id         String  @id @default(uuid())
  name       String  @unique
  created_at String
  updated_at String
  input      Input[]

  @@map("measurementUnit")
}

enum Role {
  USER
  ADMIN
}
